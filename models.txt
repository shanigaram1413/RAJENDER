from django.db import models
from datetime import datetime
from django.db.models import Sum,Avg,Count,Max,Min
from django.utils.timezone import *
#Product managers
class ProductManager(models.Manager):
	def productSales(self):
		return super(ProductManager,self).get_queryset().values('productName','productDesc','mrp','mfg').filter(mrp__gt=6000)
	def productSales1(self):
		return super(ProductManager,self).get_queryset().values('productName','productDesc','mrp','mfg').filter(mrp__gte=6000)
	def productSales2(self):
		return super(ProductManager,self).get_queryset().values('productName','productDesc','mrp','mfg').filter(mrp__exact=6000)
	def productSales3(self):
		return super(ProductManager,self).get_queryset().values('productName','productDesc','mrp','mfg').filter(mrp__lt=6000)
	def productSales4(self):
		return super(ProductManager,self).get_queryset().values('productName','productDesc','mrp','mfg').filter(mrp__lte=9000)
# Create your models here.
gender=(('M','Male'),
		('F','Female'),
		)
class Products(models.Model):
	productId=models.CharField(max_length=10,unique=True)
	productName=models.CharField(max_length=30)
	productDesc=models.CharField(max_length=100)
	mrp=models.IntegerField()
	mfg=models.DateField()
	type=models.CharField(max_length=30,default='general needs')
	product_manager=ProductManager()
	def price(self):
		if self.mrp>=10000:
			return "high quality product."
		else:
			return "low quality product."
	def __str__(self):
		return self.productName
#customer manager create here
class CustomerManager(models.Manager):
	def details(self):
		return super(CustomerManager,self).get_queryset().values('cust_name','gender','mobile','dob','emailId','address').filter(id__lte=5)

#customer model create here
class Customer(models.Model):
	cust_name=models.CharField(max_length=30)
	dob=models.DateField()
	gender=models.CharField(max_length=2,choices=gender,default='M')
	mobile=models.IntegerField(unique=True)
	emailId=models.EmailField(max_length=50,unique=True,null=True,blank=True)
	address=models.CharField(max_length=100)
	cust_manager=CustomerManager()
	def wish(self):
		m=datetime.now().month
		d=datetime.now().day
		if (self.dob.month==m)and(self.dob.day==d):
			return "Wish you many more happy return of the day."
class EmployeeManager(models.Manager):
	def details(self):
		return super(EmployeeManager,self).get_queryset().filter(salary__gte=10000).values('name','gender','salary')
class Employee(models.Model):
	name=models.CharField(max_length=30)
	gender=models.CharField(max_length=2,choices=gender,default='M')
	address=models.CharField(max_length=100)
	mobile=models.IntegerField(unique=True)
	emailId=models.EmailField(max_length=50,unique=True,null=True,blank=True)
	salary=models.IntegerField()
	dob=models.DateField()
	join_date=models.DateField()
	emp_manager=EmployeeManager()
	def age(self):
		now=datetime.now().year
		m=datetime.now().month
		d=datetime.now().day
		if (d-self.dob.day)<1:
			return (now-self.dob.year),'-',(m-self.dob.month-1),'-',(30-self.dob.day)
		return (now-self.dob.year),(m-self.dob.month),(d-self.dob.day)
	def wish(self):
		m=datetime.now().month
		d=datetime.now().day
		if (self.dob.month==m)and(self.dob.day==d):
			return "Wish you many more happy return of the day."
#relationships
class Orders(models.Model):
	products=models.ForeignKey(Products,on_delete=models.CASCADE)
	purchage=models.DateField(auto_now=True)
	customer=models.ForeignKey(Customer,on_delete=models.CASCADE)